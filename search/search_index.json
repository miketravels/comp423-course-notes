{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Michael's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Michael Pearce-Ros</li> <li>Reviewer: Jake Deng</li> </ul> <p>Welcome to the wonderful world of Rust! This tutorial will show you how to set up a GitHub repository, a development enviroment running Rust, and writing and building a Rust program that says \"Hello COMP423\". Set up for intializing a git repository and Docker image has been adapted from the COMP423 - Spring 2025 website.</p>"},{"location":"tutorials/rust-setup/#pre-requisites","title":"Pre-requisites","text":"<p>Before getting started, make sure you have the following installed:</p> <ul> <li>VSCode</li> <li>Docker</li> <li>Git</li> </ul>"},{"location":"tutorials/rust-setup/#part-1-project-setup-creating-the-repository","title":"Part 1. Project Setup: Creating the Repository","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initalize-git","title":"Step 1. Create a Local Directory and Initalize Git","text":"<p>(1) Open up terminal or command prompt.</p> <p>(2) Create a new directory for your project using:  <pre><code>mkdir comp423-hello-rust\ncd comp423-hello-rust\n</code></pre> (3) Initialize a new Git repository: <pre><code>git init\n</code></pre></p> <p>(4) Create a README file: <pre><code>echo \"# COMP423 Rust Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2. Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(2) Fill in the details as follows:</p> <ul> <li> <p>Repository Name: <code>comp423-hello-rust</code></p> </li> <li> <p>Description: A program written in Rust that outputs \"Hello COMP423\" to the console.</p> </li> <li> <p>Visibility: Public</p> </li> </ul> <p>(3) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(4) Click Create Repository.</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote:  <code>git remote add origin https://github.com/&lt;your-username&gt;/comp423-hello-rust.git</code></p> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(2) Check your default branch name with <code>git branch</code>. In the event it isn't <code>main</code>, rename it to main using <code>git branch -M main</code>.</p> <p>(3) Push your local commits to the GitHub repository:</p> <p><code>git push --set-upstream origin main</code></p> <p>(4) In your web browser, refresh your GitHub repository to verify that the local commit has now been pushed to remote.</p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-enviorment","title":"Part 2. Setting Up The Development Enviorment","text":"<p>(1) In VS Code, open the <code>comp423-hello-rust</code> directory. You can do this via File &gt; Open Folder.</p> <p>(2) Install the Dev Containers extension for VS Code.</p> <p>(3) Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory: <code>.devcontainer/devcontainer.json</code></p> <p>(4) Inside the <code>.devcontainer/devcontainer.json</code> file, enter the following configuration information:</p> <pre><code>{\n  \"name\": \"COMP423 Hello Rust\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre> <p>This will get the latest Rust image plus rust-analyser for when we run our container.</p> <p>(4) Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option.</p> <p>(5) After the container has opened, open a new terminal pane within VSCode. In the terminal, run  <code>rustc --version</code>  to verify that you are using the latest version of rust.</p>"},{"location":"tutorials/rust-setup/#part-3-creating-a-rust-project","title":"Part 3. Creating a Rust Project","text":"<p>(1) In the terminal, run <code>cargo new hello_comp --vcs none</code>. This will create a new Rust project. In VS Code's explorer, open up <code>main.rs</code> under <code>hello_comp/src/main.rs</code>. </p> <p>Note</p> <p>If the <code>hello_comp</code> folder does not appear in the explorer after running the cargo command, refresh the explorer.</p> <p>(2) <code>main.rs</code> should be prepopulated with the following: <pre><code>    fn main() {\n        println!(\"Hello, world!\");\n    }\n</code></pre>  Change the <code>println</code> statement to  <code>println!(\"Hello COMP423\")</code>. Save the file afterwards.</p> <p>(3) In the VSCode terminal, run the <code>cd hello_comp</code> to enter the project folder. Then run the following to compile and run your program.  <pre><code>   cargo build\n   ./target/debug/hello_comp\n</code></pre></p> <p><code>cargo build</code> is the Rust equivalent to C's <code>gcc</code> command, in which it compiles a file to be executed later. Compiled Rust files can be found under <code>./target/debug</code>. Running <code>./target/debug/hello_comp</code> will execute the compiled <code>hello_comp</code> file.</p> <p>Note</p> <p><code>cargo run</code> can be used instead to compile and run the program in a single step. It can also accept most arguments that can be used with <code>cargo build</code></p>"},{"location":"tutorials/rust-setup/#part-4-deployment","title":"Part 4. Deployment","text":"<p>(1) Enter <code>cd ..</code> into the terminal to go back to the <code>hello_comp</code> directory.</p> <p>(2) Add, commit, and push changes: <pre><code>git add .\ngit commit -m \"Wrote a hello comp423 program in Rust\"\ngit push origin main\n</code></pre></p>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>With pushing your files to your GitHub repository, you have successfully completed this tutorial!</p>"}]}